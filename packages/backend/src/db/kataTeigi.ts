/**
 * データベース型定義
 * 
 * 初学者向けメモ：
 * - TypeScriptの型システムを活用してデータベース操作を型安全にする
 * - Drizzle ORMの型推論機能を最大限に活用
 * - コンパイル時にクエリの型チェックが可能になる
 */

import { drizzle } from 'drizzle-orm/d1';
import * as schema from './schema';

/**
 * データベース接続の型定義
 * 
 * 初学者向けメモ：
 * - ReturnType<T> は関数Tの戻り値の型を取得するユーティリティ型
 * - typeof演算子でスキーマオブジェクトの型を取得
 * - この型定義により、データベース操作時に型チェックが効く
 */
export type データベース型 = ReturnType<typeof drizzle<typeof schema>>;

/**
 * Cloudflare D1データベースの型定義
 * 
 * 初学者向けメモ：
 * - Cloudflare Workersで使用されるD1データベースの型
 * - グローバル型として定義されているが、明示的に型定義
 */
export type D1データベース型 = D1Database;

/**
 * データベース操作の基本インターface
 * 
 * 初学者向けメモ：
 * - 将来的な拡張を考慮したインターフェース設計
 * - トランザクション処理や接続プールなどの機能拡張時に使用
 */
export interface データベース操作インターフェース {
  /**
   * データベース接続インスタンス
   */
  readonly 接続: データベース型;
  
  /**
   * 接続状態の確認
   * @returns 接続が有効かどうか
   */
  接続確認(): Promise<boolean>;
}

/**
 * 初学者向けメモ：TypeScript型システムの活用ポイント
 * 
 * 1. 型推論の活用
 *    - ReturnType<T> で関数の戻り値型を自動取得
 *    - typeof でオブジェクトの型を取得
 *    - コード変更時に型定義も自動更新される
 * 
 * 2. 型安全性の確保
 *    - データベース操作時のミスをコンパイル時に発見
 *    - IDEでのオートコンプリート機能が向上
 *    - リファクタリング時の安全性が向上
 * 
 * 3. ドキュメンテーション効果
 *    - 型定義がAPIの仕様書としても機能
 *    - チーム開発時の理解しやすさが向上
 *    - 将来の自分や他の開発者への親切な設計
 */