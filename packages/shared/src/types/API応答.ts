/**
 * API応答の型定義
 * 
 * 初学者向けメモ：
 * - フロントエンドとバックエンドで共通の型定義を使用
 * - API通信の型安全性を確保
 * - ジェネリクス（T）を使用して柔軟な型定義を実現
 */

/**
 * 基本的なAPI応答インターフェース
 * 
 * 初学者向けメモ：
 * - ジェネリクス <T> により、データの型を動的に指定可能
 * - 全てのAPI応答で一貫した構造を保証
 * - 成功・失敗の判定を型レベルで管理
 * 
 * @template T - データの型（デフォルトはunknown）
 */
export interface API応答<T = unknown> {
  /** API実行の成功・失敗フラグ */
  readonly 成功: boolean;
  
  /** ユーザー向けメッセージ */
  readonly メッセージ: string;
  
  /** 成功時に返されるデータ（オプション） */
  readonly データ?: T;
  
  /** エラー時の詳細情報（オプション） */
  readonly エラー?: string;
}

/**
 * プレイヤー関連の型定義をインポート
 * 
 * 初学者向けメモ：
 * - 相対パスでの型インポート
 * - モジュラーな型定義の管理
 */
import type { プレイヤー } from './プレイヤー';

/**
 * プレイヤー作成・取得API応答
 * 
 * 初学者向けメモ：
 * - API応答インターフェースを継承
 * - プレイヤー情報を含む応答型
 * - 型の合成による安全性向上
 */
export interface プレイヤー応答 extends API応答<プレイヤー> {}

/**
 * プレイヤー一覧取得API応答
 * 
 * 初学者向けメモ：
 * - 配列型のデータを扱う応答
 * - 件数フィールドを追加で定義
 * - 交差型（&）による型の拡張
 */
export interface プレイヤー一覧応答 extends API応答<プレイヤー[]> {
  /** 取得されたプレイヤーの件数 */
  readonly 件数: number;
}

/**
 * エラー専用応答
 * 
 * 初学者向けメモ：
 * - エラー時に特化した型定義
 * - データは必ず undefined
 * - エラー情報は必須
 */
export interface エラー応答 extends API応答<undefined> {
  readonly 成功: false;
  readonly エラー: string;
}

/**
 * 成功専用応答のヘルパー型
 * 
 * 初学者向けメモ：
 * - 成功時に特化した型定義
 * - データは必須
 * - エラーは存在しない
 */
export interface 成功応答<T> extends API応答<T> {
  readonly 成功: true;
  readonly データ: T;
  readonly エラー?: never;
}

/**
 * HTTPレスポンス型
 * 
 * 初学者向けメモ：
 * - 統一されたHTTPレスポンス形式
 * - エラーコードを含む構造化エラー
 * - 型安全性を保ちつつ柔軟な実装
 */
export interface HTTPレスポンス型<T = unknown> {
  readonly 成功: boolean;
  readonly データ?: T;
  readonly メッセージ?: string;
  readonly 件数?: number;
  readonly エラー?: {
    readonly コード: string;
    readonly メッセージ: string;
  };
}

/**
 * 初学者向けメモ：型安全なAPI設計の利点
 * 
 * 1. コンパイル時チェック
 *    - APIレスポンスの構造を事前に検証
 *    - 型不一致によるランタイムエラーを防止
 *    - リファクタリング時の影響範囲を明確化
 * 
 * 2. 開発体験の向上
 *    - IDEでのオートコンプリート機能
 *    - APIドキュメントとしての役割
 *    - チーム開発での認識統一
 * 
 * 3. 保守性の向上
 *    - API仕様変更時の影響を型レベルで追跡
 *    - 段階的な型定義の改善が可能
 *    - テストコードでの型安全性も確保
 * 
 * 4. フロントエンド・バックエンド連携
 *    - 共通の型定義による整合性保証
 *    - APIクライアント実装の簡略化
 *    - モックデータ作成の効率化
 */