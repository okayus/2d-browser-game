/**
 * バリデーションユーティリティ単体テスト
 * 
 * 初学者向けメモ：
 * - Zodスキーマ検証の動作確認
 * - エラーハンドリングの検証
 * - プリミティブバリデーション関数のテスト
 * - 日本語エラーメッセージの確認
 */

import { describe, it, expect } from 'vitest';
import { z } from 'zod';
import {
  バリデーション実行,
  必須チェック,
  文字列長チェック,
  数値範囲チェック
} from '../../utils/バリデーション';

describe('バリデーションユーティリティ単体テスト', () => {

  describe('バリデーション実行関数', () => {
    /**
     * 正常系テスト: Zodスキーマでの成功パターン
     * 
     * 初学者向けメモ：
     * - 有効なデータでバリデーションが成功することを確認
     * - 戻り値の構造確認
     * - 型安全性の確認
     */
    it('有効なデータでバリデーションが成功する', () => {
      const ユーザースキーマ = z.object({
        名前: z.string().min(1),
        年齢: z.number().min(0).max(150),
        メール: z.string().email(),
      });

      const 有効なデータ = {
        名前: '田中太郎',
        年齢: 25,
        メール: 'tanaka@example.com',
      };

      const 結果 = バリデーション実行(ユーザースキーマ, 有効なデータ);

      expect(結果.成功).toBe(true);
      expect(結果.データ).toEqual(有効なデータ);
      expect(結果.エラー).toBeUndefined();
    });

    /**
     * 異常系テスト: Zodバリデーションエラー
     * 
     * 初学者向けメモ：
     * - 無効なデータでバリデーションが失敗することを確認
     * - エラーメッセージの形式確認
     * - 複数エラーの統合確認
     */
    it('無効なデータでバリデーションが失敗し、適切なエラーメッセージを返す', () => {
      const プレイヤースキーマ = z.object({
        名前: z.string().min(1, '名前は必須です'),
        レベル: z.number().min(1, 'レベルは1以上である必要があります').max(100, 'レベルは100以下である必要があります'),
      });

      const 無効なデータ = {
        名前: '', // 空文字は無効
        レベル: 101, // 100を超えるのは無効
      };

      const 結果 = バリデーション実行(プレイヤースキーマ, 無効なデータ);

      expect(結果.成功).toBe(false);
      expect(結果.データ).toBeUndefined();
      expect(結果.エラー).toBeDefined();
      expect(typeof 結果.エラー).toBe('string');
      
      // エラーメッセージに複数の問題が含まれることを確認
      expect(結果.エラー).toContain('名前');
      expect(結果.エラー).toContain('レベル');
    });

    /**
     * 型変換テスト: Zodの型変換機能
     * 
     * 初学者向けメモ：
     * - 文字列から数値への自動変換確認
     * - coerce機能の動作確認
     */
    it('Zodの型変換機能が正しく動作する', () => {
      const 数値変換スキーマ = z.object({
        数値: z.coerce.number(),
        真偽値: z.coerce.boolean(),
      });

      const 文字列データ = {
        数値: '42',
        真偽値: 'true',
      };

      const 結果 = バリデーション実行(数値変換スキーマ, 文字列データ);

      expect(結果.成功).toBe(true);
      expect(結果.データ?.数値).toBe(42);
      expect(結果.データ?.真偽値).toBe(true);
      expect(typeof 結果.データ?.数値).toBe('number');
      expect(typeof 結果.データ?.真偽値).toBe('boolean');
    });

    /**
     * 複雑なスキーマテスト: ネストしたオブジェクト
     * 
     * 初学者向けメモ：
     * - 複雑なデータ構造でのバリデーション
     * - 配列や入れ子オブジェクトの処理
     */
    it('複雑なスキーマでバリデーションが正しく動作する', () => {
      const モンスタースキーマ = z.object({
        基本情報: z.object({
          名前: z.string().min(1),
          種族: z.string(),
          レベル: z.number().min(1).max(100),
        }),
        ステータス: z.object({
          HP: z.number().min(1),
          攻撃力: z.number().min(0),
          防御力: z.number().min(0),
        }),
        技: z.array(z.string()).min(1, '最低1つの技が必要です'),
        タグ: z.array(z.string()).optional(),
      });

      const 有効なモンスター = {
        基本情報: {
          名前: 'でんきネズミ',
          種族: 'Electric',
          レベル: 25,
        },
        ステータス: {
          HP: 100,
          攻撃力: 50,
          防御力: 40,
        },
        技: ['でんきショック', 'かみなり'],
        タグ: ['スターター', 'かわいい'],
      };

      const 結果 = バリデーション実行(モンスタースキーマ, 有効なモンスター);

      expect(結果.成功).toBe(true);
      expect(結果.データ?.基本情報.名前).toBe('でんきネズミ');
      expect(結果.データ?.技).toHaveLength(2);
      expect(結果.データ?.タグ).toHaveLength(2);
    });

    /**
     * 異常系テスト: 予期しないエラー
     * 
     * 初学者向けメモ：
     * - Zod以外のエラーでの処理確認
     * - 例外安全性の確認
     */
    it('予期しないエラーが発生した場合は汎用エラーメッセージを返す', () => {
      // モックスキーマでparse時に非Zodエラーを発生させる
      const 問題のあるスキーマ = {
        parse: () => {
          throw new Error('予期しないエラー');
        }
      } as { parse: () => never };

      const 結果 = バリデーション実行(問題のあるスキーマ as never, {});

      expect(結果.成功).toBe(false);
      expect(結果.エラー).toBe('バリデーションエラーが発生しました');
    });
  });

  describe('必須チェック関数', () => {
    /**
     * 正常系テスト: 有効な値での成功
     * 
     * 初学者向けメモ：
     * - 様々な有効な値での動作確認
     * - 戻り値の確認
     */
    it('有効な値の場合はtrueを返す', () => {
      const 有効な値一覧 = ['有効な文字列', 123, true, false, 0, []];
      
      有効な値一覧.forEach(値 => {
        expect(必須チェック(値, 'テストフィールド')).toBe(true);
      });
    });

    /**
     * 異常系テスト: 無効な値でのエラー
     * 
     * 初学者向けメモ：
     * - null、undefined、空文字での例外確認
     * - 日本語エラーメッセージの確認
     */
    it('無効な値の場合はエラーを投げる', () => {
      const 無効な値一覧 = [null, undefined, ''];
      
      無効な値一覧.forEach(無効な値 => {
        expect(() => {
          必須チェック(無効な値, 'プレイヤー名');
        }).toThrow('プレイヤー名は必須です');
      });
    });

    /**
     * エラーメッセージテスト: フィールド名の動的挿入
     */
    it('フィールド名がエラーメッセージに正しく挿入される', () => {
      const テストケース = [
        { フィールド名: 'ユーザー名', 期待メッセージ: 'ユーザー名は必須です' },
        { フィールド名: 'パスワード', 期待メッセージ: 'パスワードは必須です' },
        { フィールド名: 'モンスター名', 期待メッセージ: 'モンスター名は必須です' },
      ];

      テストケース.forEach(({ フィールド名, 期待メッセージ }) => {
        expect(() => {
          必須チェック(null, フィールド名);
        }).toThrow(期待メッセージ);
      });
    });
  });

  describe('文字列長チェック関数', () => {
    /**
     * 正常系テスト: 有効な長さでの成功
     * 
     * 初学者向けメモ：
     * - 境界値を含む有効な長さでの確認
     * - 最小・最大・中間値での動作確認
     */
    it('有効な長さの文字列の場合はtrueを返す', () => {
      const 最小長 = 3;
      const 最大長 = 10;
      
      const 有効な文字列一覧 = [
        'abc',      // 最小長
        'abcde',    // 中間
        'abcdefghij' // 最大長
      ];

      有効な文字列一覧.forEach(文字列 => {
        expect(文字列長チェック(文字列, 最小長, 最大長, 'テスト名')).toBe(true);
      });
    });

    /**
     * 異常系テスト: 短すぎる文字列
     * 
     * 初学者向けメモ：
     * - 最小長未満でのエラー確認
     * - 適切なエラーメッセージの確認
     */
    it('短すぎる文字列の場合はエラーを投げる', () => {
      expect(() => {
        文字列長チェック('ab', 3, 10, 'ユーザー名');
      }).toThrow('ユーザー名は3文字以上で入力してください');
    });

    /**
     * 異常系テスト: 長すぎる文字列
     */
    it('長すぎる文字列の場合はエラーを投げる', () => {
      expect(() => {
        文字列長チェック('abcdefghijk', 3, 10, 'ニックネーム');
      }).toThrow('ニックネームは10文字以下で入力してください');
    });

    /**
     * 境界値テスト: 境界付近での動作確認
     * 
     * 初学者向けメモ：
     * - 丁度境界値での動作確認
     * - off-by-oneエラーの確認
     */
    it('境界値で正しく動作する', () => {
      const 最小長 = 5;
      const 最大長 = 15;

      // 境界値-1（エラー）
      expect(() => {
        文字列長チェック('1234', 最小長, 最大長, 'テスト');
      }).toThrow();

      expect(() => {
        文字列長チェック('1234567890123456', 最小長, 最大長, 'テスト');
      }).toThrow();

      // 境界値（成功）
      expect(文字列長チェック('12345', 最小長, 最大長, 'テスト')).toBe(true);
      expect(文字列長チェック('123456789012345', 最小長, 最大長, 'テスト')).toBe(true);
    });

    /**
     * マルチバイト文字テスト: 日本語文字での長さ計算
     * 
     * 初学者向けメモ：
     * - 日本語文字が正しく1文字として計算されることを確認
     * - 絵文字や特殊文字での動作確認
     */
    it('マルチバイト文字を正しく処理する', () => {
      const 日本語文字列 = 'あいうえお'; // 5文字
      const 絵文字混在 = 'テスト😀😊'; // 6文字
      
      expect(文字列長チェック(日本語文字列, 3, 10, 'テスト')).toBe(true);
      expect(文字列長チェック(絵文字混在, 3, 10, 'テスト')).toBe(true);
      
      expect(() => {
        文字列長チェック('あいうえおかきくけこさしすせそ', 3, 10, 'テスト'); // 15文字
      }).toThrow();
    });
  });

  describe('数値範囲チェック関数', () => {
    /**
     * 正常系テスト: 有効な範囲での成功
     * 
     * 初学者向けメモ：
     * - 最小・最大・中間値での動作確認
     * - 境界値を含む有効な範囲での確認
     */
    it('有効な範囲の数値の場合はtrueを返す', () => {
      const 最小値 = 10;
      const 最大値 = 100;
      
      const 有効な数値一覧 = [10, 50, 100, 10.5, 99.9];

      有効な数値一覧.forEach(数値 => {
        expect(数値範囲チェック(数値, 最小値, 最大値, 'レベル')).toBe(true);
      });
    });

    /**
     * 異常系テスト: 最小値未満
     * 
     * 初学者向けメモ：
     * - 最小値未満でのエラー確認
     * - 負の数値での動作確認
     */
    it('最小値未満の場合はエラーを投げる', () => {
      expect(() => {
        数値範囲チェック(5, 10, 100, 'HP');
      }).toThrow('HPは10以上の値を入力してください');

      expect(() => {
        数値範囲チェック(-1, 0, 100, 'スコア');
      }).toThrow('スコアは0以上の値を入力してください');
    });

    /**
     * 異常系テスト: 最大値超過
     */
    it('最大値を超える場合はエラーを投げる', () => {
      expect(() => {
        数値範囲チェック(101, 10, 100, '年齢');
      }).toThrow('年齢は100以下の値を入力してください');
    });

    /**
     * 小数点テスト: 小数値での動作確認
     * 
     * 初学者向けメモ：
     * - 整数以外の数値での動作確認
     * - 精度の問題がないことを確認
     */
    it('小数値を正しく処理する', () => {
      const 最小値 = 0.1;
      const 最大値 = 10.5;

      expect(数値範囲チェック(5.5, 最小値, 最大値, 'レート')).toBe(true);
      
      expect(() => {
        数値範囲チェック(0.05, 最小値, 最大値, 'レート');
      }).toThrow();

      expect(() => {
        数値範囲チェック(10.6, 最小値, 最大値, 'レート');
      }).toThrow();
    });

    /**
     * 境界値テスト: 丁度境界での動作確認
     */
    it('境界値で正しく動作する', () => {
      const 最小値 = 1;
      const 最大値 = 100;

      // 境界値（成功）
      expect(数値範囲チェック(1, 最小値, 最大値, 'テスト')).toBe(true);
      expect(数値範囲チェック(100, 最小値, 最大値, 'テスト')).toBe(true);

      // 境界値-1, +1（エラー）
      expect(() => {
        数値範囲チェック(0.999, 最小値, 最大値, 'テスト');
      }).toThrow();

      expect(() => {
        数値範囲チェック(100.001, 最小値, 最大値, 'テスト');
      }).toThrow();
    });
  });

  describe('統合テスト', () => {
    /**
     * 実用例テスト: ゲームデータのバリデーション
     * 
     * 初学者向けメモ：
     * - 実際のユースケースでの組み合わせテスト
     * - 複数のバリデーション関数の連携確認
     */
    it('ゲームデータの実用的なバリデーション例', () => {
      function プレイヤーデータ検証(データ: { 名前: string; レベル: number; HP?: number }) {
        // 段階的なバリデーション
        必須チェック(データ.名前, 'プレイヤー名');
        文字列長チェック(データ.名前, 1, 20, 'プレイヤー名');
        
        必須チェック(データ.レベル, 'レベル');
        数値範囲チェック(データ.レベル, 1, 100, 'レベル');
        
        if (データ.HP !== undefined) {
          数値範囲チェック(データ.HP, 1, 999, 'HP');
        }
        
        return true;
      }

      // 有効なデータ
      const 有効なプレイヤー = {
        名前: 'テストプレイヤー',
        レベル: 25,
        HP: 100,
      };

      expect(プレイヤーデータ検証(有効なプレイヤー)).toBe(true);

      // 無効なデータ
      const 無効なプレイヤー = {
        名前: '', // 空文字
        レベル: 101, // 範囲外
        HP: 0, // 範囲外
      };

      expect(() => {
        プレイヤーデータ検証(無効なプレイヤー);
      }).toThrow();
    });

    /**
     * Zodとの併用テスト: プリミティブ関数とZodの組み合わせ
     */
    it('Zodスキーマとプリミティブバリデーション関数を併用できる', () => {
      const カスタムバリデーション付きスキーマ = z.object({
        名前: z.string().refine(値 => {
          try {
            文字列長チェック(値, 2, 15, '名前');
            return true;
          } catch {
            return false;
          }
        }, '名前は2文字以上15文字以下で入力してください'),
        レベル: z.number().refine(値 => {
          try {
            数値範囲チェック(値, 1, 50, 'レベル');
            return true;
          } catch {
            return false;
          }
        }, 'レベルは1以上50以下である必要があります'),
      });

      // 有効なデータ
      const 有効なデータ = { 名前: 'テスト', レベル: 25 };
      const 成功結果 = バリデーション実行(カスタムバリデーション付きスキーマ, 有効なデータ);
      expect(成功結果.成功).toBe(true);

      // 無効なデータ
      const 無効なデータ = { 名前: 'a', レベル: 51 }; // 短すぎる名前、高すぎるレベル
      const 失敗結果 = バリデーション実行(カスタムバリデーション付きスキーマ, 無効なデータ);
      expect(失敗結果.成功).toBe(false);
    });
  });
});

/**
 * 初学者向けメモ：バリデーションテストのポイント
 * 
 * 1. 正常系と異常系の網羅
 *    - 有効なデータでの成功確認
 *    - 無効なデータでの失敗確認
 *    - 境界値での動作確認
 * 
 * 2. エラーメッセージの確認
 *    - 日本語メッセージの正確性
 *    - フィールド名の動的挿入
 *    - ユーザーフレンドリーな内容
 * 
 * 3. 型安全性の確認
 *    - TypeScriptの型推論が正しく動作
 *    - バリデーション済みデータの型保証
 *    - ジェネリクスの適切な使用
 * 
 * 4. 実用性の確認
 *    - 実際のユースケースでの動作
 *    - 複数バリデーションの組み合わせ
 *    - Zodとの統合使用
 * 
 * 5. 国際化対応
 *    - マルチバイト文字の正しい処理
 *    - 絵文字や特殊文字への対応
 *    - 日本語での文字列長計算
 * 
 * 6. パフォーマンス考慮
 *    - 大量データでの処理速度
 *    - メモリ使用量の最適化
 *    - 不要な処理の回避
 */