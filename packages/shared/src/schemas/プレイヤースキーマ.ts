/**
 * プレイヤー関連のZodスキーマ定義
 * 初学者向け: 入力値検証の実装例
 */

import { z } from 'zod';

/**
 * プレイヤー名のバリデーションスキーマ
 * 3文字以上20文字以下の文字列
 */
export const プレイヤー名スキーマ = z
  .string({
    required_error: 'プレイヤー名は必須です',
    invalid_type_error: 'プレイヤー名は文字列である必要があります',
  })
  .min(3, 'プレイヤー名は3文字以上で入力してください')
  .max(20, 'プレイヤー名は20文字以下で入力してください')
  .regex(/^[a-zA-Z0-9ひらがなカタカナ漢字ー \s]+$/, '使用できない文字が含まれています');

/**
 * プレイヤー作成時のリクエストスキーマ
 */
export const プレイヤー作成スキーマ = z.object({
  名前: プレイヤー名スキーマ,
});

/**
 * プレイヤーレスポンススキーマ
 */
export const プレイヤースキーマ = z.object({
  id: z.string().uuid('無効なプレイヤーIDです'),
  名前: プレイヤー名スキーマ,
  作成日時: z.string().datetime('無効な日時形式です'),
});

/**
 * プレイヤー作成レスポンススキーマ
 */
export const プレイヤー作成レスポンススキーマ = z.object({
  プレイヤー: プレイヤースキーマ,
  初期モンスターid: z.string().uuid('無効なモンスターIDです'),
});

// 型推論は各パッケージで必要に応じて実行